Gu.Roslyn.AnalyzerExtensions.AssignmentWalker
Gu.Roslyn.AnalyzerExtensions.AssignmentWalker.Assignments.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax>
Gu.Roslyn.AnalyzerExtensions.IfStatementWalker
Gu.Roslyn.AnalyzerExtensions.IfStatementWalker.IfStatements.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax>
Gu.Roslyn.AnalyzerExtensions.InvocationWalker
Gu.Roslyn.AnalyzerExtensions.InvocationWalker.Invocations.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax>
Gu.Roslyn.AnalyzerExtensions.MemberPathComparer
Gu.Roslyn.AnalyzerExtensions.MemberPathComparer.GetHashCode(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax obj) -> int
Gu.Roslyn.AnalyzerExtensions.ObjectCreationWalker
Gu.Roslyn.AnalyzerExtensions.ObjectCreationWalker.ObjectCreations.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax>
Gu.Roslyn.AnalyzerExtensions.StringLiteralWalker
Gu.Roslyn.AnalyzerExtensions.StringLiteralWalker.Literals.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax>
Gu.Roslyn.AnalyzerExtensions.ThrowWalker
Gu.Roslyn.AnalyzerExtensions.ThrowWalker.ThrowStatementsAndExpressions.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.SyntaxToken>
Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker
Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker.UsingDirectiveWalker() -> void
Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker.UsingDirectives.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax>
Gu.Roslyn.AnalyzerExtensions.UsingStatementWalker
Gu.Roslyn.AnalyzerExtensions.UsingStatementWalker.UsingStatements.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax>
Gu.Roslyn.AnalyzerExtensions.YieldStatementWalker
Gu.Roslyn.AnalyzerExtensions.YieldStatementWalker.YieldStatements.get -> System.Collections.Generic.IReadOnlyList<Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax>
override Gu.Roslyn.AnalyzerExtensions.AssignmentWalker.VisitAssignmentExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.IfStatementWalker.VisitIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.InvocationWalker.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.ObjectCreationWalker.VisitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.StringLiteralWalker.VisitLiteralExpression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.ThrowWalker.VisitThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.ThrowWalker.VisitThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker.VisitClassDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker.VisitEnumDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker.VisitStructDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker.VisitUsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.UsingStatementWalker.VisitUsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax node) -> void
override Gu.Roslyn.AnalyzerExtensions.YieldStatementWalker.VisitYieldStatement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax node) -> void
static Gu.Roslyn.AnalyzerExtensions.ArgumentListSyntaxExt.TryFindParams(this Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.IParameterSymbol parameter, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax> arguments) -> bool
static Gu.Roslyn.AnalyzerExtensions.AssignmentWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.AssignmentWalker
static Gu.Roslyn.AnalyzerExtensions.ConstructorInitializerSyntaxExt.TryFindArgumentParams(this Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, Microsoft.CodeAnalysis.IParameterSymbol parameter, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax> arguments) -> bool
static Gu.Roslyn.AnalyzerExtensions.IfStatementWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.IfStatementWalker
static Gu.Roslyn.AnalyzerExtensions.InvocationExpressionSyntaxExt.TryFindArgumentParams(this Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax invocation, Microsoft.CodeAnalysis.IParameterSymbol parameter, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax> arguments) -> bool
static Gu.Roslyn.AnalyzerExtensions.InvocationWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.InvocationWalker
static Gu.Roslyn.AnalyzerExtensions.MemberPathComparer.Equals(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax x, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax y) -> bool
static Gu.Roslyn.AnalyzerExtensions.MemberPathComparer.Equals(object _, object __) -> bool
static Gu.Roslyn.AnalyzerExtensions.ObjectCreationExpressionSyntaxExt.TryFindArgumentParams(this Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax creation, Microsoft.CodeAnalysis.IParameterSymbol parameter, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax> arguments) -> bool
static Gu.Roslyn.AnalyzerExtensions.ObjectCreationWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.ObjectCreationWalker
static Gu.Roslyn.AnalyzerExtensions.SemanticModelExt.GetDeclaredSymbolSafe(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax node) -> Microsoft.CodeAnalysis.IDiscardSymbol
static Gu.Roslyn.AnalyzerExtensions.SemanticModelExt.TryGetNamedType(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken, out Microsoft.CodeAnalysis.INamedTypeSymbol type) -> bool
static Gu.Roslyn.AnalyzerExtensions.SemanticModelExt.TryGetSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax node, out Microsoft.CodeAnalysis.IDiscardSymbol symbol) -> bool
static Gu.Roslyn.AnalyzerExtensions.StringLiteralWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.StringLiteralWalker
static Gu.Roslyn.AnalyzerExtensions.StyleCopComparers.UsingDirectiveComparer.IsSameOrContained(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax namespaceDeclarationSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax usingDirective) -> bool
static Gu.Roslyn.AnalyzerExtensions.ThrowWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.ThrowWalker
static Gu.Roslyn.AnalyzerExtensions.ThrowWalker.Throws(Microsoft.CodeAnalysis.SyntaxNode node) -> bool
static Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker
static Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker.BorrowAsync(Microsoft.CodeAnalysis.SyntaxTree tree, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Gu.Roslyn.AnalyzerExtensions.UsingDirectiveWalker>
static Gu.Roslyn.AnalyzerExtensions.UsingStatementWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.UsingStatementWalker
static Gu.Roslyn.AnalyzerExtensions.YieldStatementWalker.Any(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax methodDeclaration) -> bool
static Gu.Roslyn.AnalyzerExtensions.YieldStatementWalker.Borrow(Microsoft.CodeAnalysis.SyntaxNode node) -> Gu.Roslyn.AnalyzerExtensions.YieldStatementWalker