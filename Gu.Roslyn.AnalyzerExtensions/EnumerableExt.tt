<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension="generated.cs" #>
namespace Gu.Roslyn.AnalyzerExtensions
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using Microsoft.CodeAnalysis;
    using System.Diagnostics.CodeAnalysis;

    /// <summary>
    /// Extension methods that avoids allocations.
    /// </summary>
    public static partial class EnumerableExt
    {
<#
    var typeNames = new []
    {
        new Data("IReadOnlyList<T>", "T", false),
        new Data("ImmutableArray<T>", "T", true, count: "Length"),
        new Data("ChildSyntaxList", "SyntaxNodeOrToken", true),
        new Data("SeparatedSyntaxList<T>", "T", true, "SyntaxNode"),
        new Data("SyntaxList<T>", "T", true, "SyntaxNode"),
        new Data("SyntaxNodeOrTokenList", "SyntaxNodeOrToken", true),
        new Data("SyntaxTokenList", "SyntaxToken", true),
        new Data("SyntaxTriviaList", "SyntaxTrivia", true),
    };

    foreach(var types in typeNames)
    {
        var colName = types.CollectionType;
        var itemName = types.ItemType;
        var constraint = types.Constraint;
        var count = types.Count;
        var genericArg = types.GenericArg;
        this.WriteLineIfNotFirst(types, typeNames);
#>
        /// <summary>
        /// Try getting the element at <paramref name="index"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="index">The index.</param>
        /// <param name="result">The element at index if found, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryElementAt<#= genericArg #>(this <#= colName #> source, int index, [MaybeNullWhen(false)] out <#= itemName #> result)<#= constraint #>
        {
<# this.WriteIfNullThrow(types); #>
            result = default(<#= itemName #>);
            if (index < 0 ||
                source.<#= count #> <= index)
            {
                return false;
            }

            result = source[index];
            return true;
        }

        /// <summary>
        /// Try getting the single element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="result">The single element, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TrySingle<#= genericArg #>(this <#= colName #> source, [MaybeNullWhen(false)] out <#= itemName #> result)<#= constraint #>
        {
<# this.WriteIfNullThrow(types); #>
            result = default(<#= itemName #>);
            if (source.<#= count #> == 1)
            {
                result = source[0];
                return true;
            }

            return false;
        }

<# if (types.GenericArg != string.Empty) { #>
        /// <summary>
        /// Try getting the single element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <typeparam name="TResult">The type to filter by.</typeparam>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="result">The single element, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TrySingleOfType<T, TResult>(this <#= colName #> source, [MaybeNullWhen(false)] out TResult result)<#= constraint #>
            where TResult : T
        {
<# this.WriteIfNullThrow(types); #>
            result = default(TResult);
            for (var i = 0; i < source.<#= count #>; i++)
            {
                if (source[i] is TResult item)
                {
                    for (int j = i + 1; j < source.<#= count #>; j++)
                    {
                        if (source[j] is TResult)
                        {
                            return false;
                        }
                    }

                    result = item;
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Try getting the single element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <typeparam name="TResult">The type to filter by.</typeparam>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="predicate">The filter</param>
        /// <param name="result">The single element, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TrySingleOfType<T, TResult>(this <#= colName #> source, Func<TResult, bool> predicate, [MaybeNullWhen(false)] out TResult result)<#= constraint #>
            where TResult : T
        {
<# this.WriteIfNullThrow(types); #>
            result = default(TResult);
            for (var i = 0; i < source.<#= count #>; i++)
            {
                if (source[i] is TResult item &&
                    predicate(item))
                {
                    for (var j = i + 1; j < source.<#= count #>; j++)
                    {
                        if (source[j] is TResult temp &&
                            predicate(temp))
                        {
                            return false;
                        }
                    }

                    result = item;
                    return true;
                }
            }

            return false;
        }

<# } #>
        /// <summary>
        /// Try getting the single element in <paramref name="source"/> matching <paramref name="predicate"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="predicate">The predicate.</param>
        /// <param name="result">The single element matching the predicate, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TrySingle<#= genericArg #>(this <#= colName #> source, Func<<#= itemName #>, bool> predicate, [MaybeNullWhen(false)] out <#= itemName #> result)<#= constraint #>
        {
<# this.WriteIfNullThrow(types); #>
            result = default(<#= itemName #>);
            for (var i = 0; i < source.<#= count #>; i++)
            {
                var item = source[i];
                if (predicate(item))
                {
                    result = item;
                    for (var j = i + 1; j < source.<#= count #>; j++)
                    {
                        if (predicate(source[j]))
                        {
                            return false;
                        }
                    }

                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Try getting the first element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="result">The first element, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryFirst<#= genericArg #>(this <#= colName #> source, [MaybeNullWhen(false)] out <#= itemName #> result)<#= constraint #>
        {
<# this.WriteIfNullThrow(types); #>
            result = default(<#= itemName #>);
            if (source.<#= count #> == 0)
            {
                return false;
            }

            result = source[0];
            return true;
        }

<# if (types.GenericArg != string.Empty) { #>
        /// <summary>
        /// Try getting the single element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <typeparam name="TResult">The type to filter by.</typeparam>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="result">The single element, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryFirstOfType<T, TResult>(this <#= colName #> source, out TResult result)<#= constraint #>
            where TResult : T
        {
<# this.WriteIfNullThrow(types); #>
            result = default(TResult);
            for (var i = 0; i < source.<#= count #>; i++)
            {
                if (source[i] is TResult item)
                {
                    result = item;
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Try getting the single element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <typeparam name="TResult">The type to filter by.</typeparam>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="predicate">The filter</param>
        /// <param name="result">The single element, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryFirstOfType<T, TResult>(this <#= colName #> source, Func<TResult, bool> predicate, [MaybeNullWhen(false)] out TResult result)<#= constraint #>
            where TResult : T
        {
<# this.WriteIfNullThrow(types); #>
            result = default(TResult);
            for (var i = 0; i < source.<#= count #>; i++)
            {
                if (source[i] is TResult item &&
                    predicate(item))
                {
                    result = item;
                    return true;
                }
            }

            return false;
        }

<# } #>
        /// <summary>
        /// Try getting the first element in <paramref name="source"/> matching <paramref name="predicate"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="predicate">The predicate.</param>
        /// <param name="result">The first element matching the predicate, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryFirst<#= genericArg #>(this <#= colName #> source, Func<<#= itemName #>, bool> predicate, [MaybeNullWhen(false)] out <#= itemName #> result)<#= constraint #>
        {
<# this.WriteIfNullThrow(types); #>
            result = default(<#= itemName #>);
            foreach (var item in source)
            {
                if (predicate(item))
                {
                    result = item;
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Try getting the last element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="result">The last element if found, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryLast<#= genericArg #>(this <#= colName #> source, [MaybeNullWhen(false)] out <#= itemName #> result)<#= constraint #>
        {
<# this.WriteIfNullThrow(types); #>
            result = default(<#= itemName #>);
            if (source.<#= count #> == 0)
            {
                result = default(<#= itemName #>);
                return false;
            }

            result = source[source.<#= count #> - 1];
            return true;
        }

<# if (types.GenericArg != string.Empty) { #>
        /// <summary>
        /// Try getting the single element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <typeparam name="TResult">The type to filter by.</typeparam>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="result">The single element, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryLastOfType<T, TResult>(this <#= colName #> source, [MaybeNullWhen(false)] out TResult result)<#= constraint #>
            where TResult : T
        {
<# this.WriteIfNullThrow(types); #>
            result = default(TResult);
            for (var i = source.<#= count #> - 1; i >= 0; i--)
            {
                if (source[i] is TResult item)
                {
                    result = item;
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Try getting the single element in <paramref name="source"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <typeparam name="TResult">The type to filter by.</typeparam>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="predicate">The filter</param>
        /// <param name="result">The single element, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryLastOfType<T, TResult>(this <#= colName #> source, Func<TResult, bool> predicate, [MaybeNullWhen(false)] out TResult result)<#= constraint #>
            where TResult : T
        {
<# this.WriteIfNullThrow(types); #>
            result = default(TResult);
            for (var i = source.<#= count #> - 1; i >= 0; i--)
            {
                if (source[i] is TResult item &&
                    predicate(item))
                {
                    result = item;
                    return true;
                }
            }

            return false;
        }

<# } #>
        /// <summary>
        /// Try getting the last element in <paramref name="source"/> matching <paramref name="predicate"/>
        /// </summary>
<# this.WriteTypeDoc(types); #>
        /// <param name="source">The source collection, can be null.</param>
        /// <param name="predicate">The predicate.</param>
        /// <param name="result">The last element matching the predicate, can be null.</param>
        /// <returns>True if an element was found.</returns>
        public static bool TryLast<#= genericArg #>(this <#= colName #> source, Func<<#= itemName #>, bool> predicate, [MaybeNullWhen(false)] out <#= itemName #> result)<#= constraint #>
        {
<# this.WriteIfNullThrow(types); #>
            result = default(<#= itemName #>);
            for (var i = source.<#= count #> - 1; i >= 0; i--)
            {
                var item = source[i];
                if (predicate(item))
                {
                    result = item;
                    return true;
                }
            }

            result = default(<#= itemName #>);
            return false;
        }
<#  }    #>
    }
}
<#+
private void WriteLineIfNotFirst<T>(T item, T[] items)
    where T : class 
{
    if (!ReferenceEquals(items[0], item))
    {
        this.WriteLine("");
    }
}

private void WriteIfNullThrow(Data item)
{
    if (!item.IsValueType)
    {
        this.WriteLine("            if (source == null)");
        this.WriteLine("            {");
        this.WriteLine("                throw new ArgumentNullException(nameof(source));");
        this.WriteLine("            }");
        this.WriteLine("");
    }
}

private void WriteTypeDoc(Data item)
{
    if (item.ItemType == "T")
    {
        this.WriteLine("        /// <typeparam name=\"T\">The type of the elements in <paramref name=\"source\"/></typeparam>");
    }
}

internal class Data
{
    public readonly string CollectionType;
    public readonly string ItemType;
    public readonly bool IsValueType;
    public readonly string Constraint;
    public readonly string Count;
    public readonly string GenericArg;

    public Data(string collectionType, string itemType, bool isValueType, string constraint = null, string count = null)
    {
        this.CollectionType = collectionType;
        this.ItemType = itemType;
        this.IsValueType = isValueType;
        this.Constraint = string.IsNullOrEmpty(constraint)
            ? string.Empty
            : "\r\n            where T : " + constraint;
        this.Count = count ?? "Count";
        this.GenericArg = itemType == "T" ? "<T>" : string.Empty;
    }
}
#>
